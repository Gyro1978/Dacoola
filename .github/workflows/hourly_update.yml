# .github/workflows/hourly_update.yml

name: Hourly News Update and Deploy

on:
  schedule:
    - cron: "0 * * * *" # Runs at the top of every hour
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }} # Ensures only one run of this workflow at a time
      cancel-in-progress: true # Cancels older runs if a new one starts
    permissions:
      contents: write # Required to push changes back to the repository

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for accurate pulls/rebases/merges

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found. Skipping pip install -r."
          fi

      - name: Run Main Script (Generates Content and Sitemap)
        env:
          SERPAPI_API_KEY: ${{ secrets.SERPAPI_API_KEY }}
          YOUR_WEBSITE_NAME: ${{ secrets.YOUR_WEBSITE_NAME || vars.YOUR_WEBSITE_NAME || 'Dacoola' }}
          YOUR_WEBSITE_LOGO_URL: ${{ secrets.YOUR_WEBSITE_LOGO_URL || vars.YOUR_WEBSITE_LOGO_URL || '' }}
          YOUR_SITE_BASE_URL: ${{ secrets.YOUR_SITE_BASE_URL || vars.YOUR_SITE_BASE_URL || '' }}
          MAX_HOME_PAGE_ARTICLES: ${{ secrets.MAX_HOME_PAGE_ARTICLES || vars.MAX_HOME_PAGE_ARTICLES || 20 }}
          # Twitter Credentials
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
          MAKE_INSTAGRAM_WEBHOOK_URL: ${{ secrets.MAKE_INSTAGRAM_WEBHOOK_URL }}
          # Google Ads API Credentials
          GOOGLE_ADS_DEVELOPER_TOKEN: ${{ secrets.GOOGLE_ADS_DEV_TOKEN }}
          GOOGLE_ADS_LOGIN_CUSTOMER_ID: ${{ secrets.GOOGLE_ADS_LOGIN_CUSTOMER_ID }}
          GOOGLE_ADS_CLIENT_ID: ${{ secrets.GOOGLE_ADS_CLIENT_ID }}
          GOOGLE_ADS_CLIENT_SECRET: ${{ secrets.GOOGLE_ADS_CLIENT_SECRET }}
          GOOGLE_ADS_REFRESH_TOKEN: ${{ secrets.GOOGLE_ADS_REFRESH_TOKEN }}
          GOOGLE_ADS_CONFIGURATION_FILE_PATH: ${{ secrets.GOOGLE_ADS_CONFIGURATION_FILE_PATH || vars.GOOGLE_ADS_CONFIGURATION_FILE_PATH || './google-ads.yaml' }}
          SEARCH_CONSOLE_API_KEY: ${{ secrets.SEARCH_CONSOLE_API_KEY }}
          # Reddit API Credentials
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USERNAME: ${{ secrets.REDDIT_USERNAME }}
          REDDIT_PASSWORD: ${{ secrets.REDDIT_PASSWORD }}
          REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT || vars.REDDIT_USER_AGENT || 'DacoolaBot/0.1 by Dacoola' }}
          REDDIT_SUBREDDITS: ${{ secrets.REDDIT_SUBREDDITS || vars.REDDIT_SUBREDDITS || 'testingground4bots' }}
          # Bluesky Credentials
          BLUESKY_HANDLE_1: ${{ secrets.BLUESKY_HANDLE_1 }}
          BLUESKY_APP_PASSWORD_1: ${{ secrets.BLUESKY_APP_PASSWORD_1 }}
          BLUESKY_HANDLE_2: ${{ secrets.BLUESKY_HANDLE_2 }}
          BLUESKY_APP_PASSWORD_2: ${{ secrets.BLUESKY_APP_PASSWORD_2 }}
          BLUESKY_HANDLE_3: ${{ secrets.BLUESKY_HANDLE_3 }}
          BLUESKY_APP_PASSWORD_3: ${{ secrets.BLUESKY_APP_PASSWORD_3 }}
        run: python src/main.py

      - name: Commit and Push Changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Add all generated/modified files by main.py
          # It's important that all_articles.json is among these if main.py modifies it
          git add public/sitemap.xml public/ads.txt public/articles/ public/all_articles.json \
                  data/processed_article_ids.txt data/twitter_daily_limit.json \
                  data/social_media_posts_history.json dacola.log \
                  data/processed_json/ \
                  data/scraped_articles/ \
                  || echo "Some files expected by 'git add' were not found or had no changes."

          if git diff --staged --quiet; then
            echo "No content changes detected by the script to commit."
          else
            echo "Content changes detected. Committing..."
            # This commit contains the script's version of all_articles.json
            git commit -m "Automated news update and sitemap generation [skip ci]"

            echo "Attempting to pull remote changes before push..."
            # Strategy:
            # 1. Fetch remote changes.
            # 2. Try a rebase.
            # 3. If rebase fails due to conflicts (likely in all_articles.json):
            #    a. Abort the rebase.
            #    b. Force checkout the remote version of all_articles.json (theirs).
            #    c. Re-apply the script's commit (which contains our desired all_articles.json).
            #       This effectively says "my script's version of all_articles.json is the truth".
            #    d. This can be risky if other important, non-conflicting changes happened to all_articles.json remotely
            #       that your script wasn't aware of. The ideal solution is often to rebuild all_articles.json
            #       from source (processed_json/) *after* a clean pull, but that's a script logic change.

            git fetch origin
            
            echo "Trying to rebase local commit onto remote branch..."
            if ! git rebase origin/${{ github.ref_name }}; then
              echo "Rebase failed. This often means there's a conflict in a frequently updated file like all_articles.json."
              echo "Aborting rebase to attempt a different strategy."
              git rebase --abort
              
              echo "Resetting local branch to remote state to ensure clean base."
              # This discards the local commit made by this Action run temporarily
              git reset --hard origin/${{ github.ref_name }} 
              
              echo "Re-running the main script to ensure all files are generated based on the latest remote state."
              # This assumes main.py can safely re-run and regenerate its outputs, including all_articles.json
              # This is crucial: main.py must now generate the definitive version of all_articles.json for this run.
              python src/main.py
              
              echo "Re-adding all generated files after script re-run."
              git add public/sitemap.xml public/ads.txt public/articles/ public/all_articles.json \
                      data/processed_article_ids.txt data/twitter_daily_limit.json \
                      data/social_media_posts_history.json dacola.log \
                      data/processed_json/ \
                      data/scraped_articles/ \
                      || echo "Some files not found or no changes after script re-run."

              if git diff --staged --quiet; then
                echo "No changes to commit after script re-run based on remote state. Pushing remote state."
                # This means the script re-run didn't produce new changes compared to what's now local (which is remote)
                # This path should ideally not be taken if new articles were meant to be added.
              else
                echo "Committing changes generated after script re-run on updated base."
                git commit -m "Automated news update (post-rebase-conflict-resolution strategy) [skip ci]"
              fi
            fi

            echo "Attempting to push changes..."
            retry_count=0; max_retries=5; delay_seconds=10;
            until git push origin ${{ github.ref_name }} || [ $retry_count -ge $max_retries ]; do
              retry_count=$((retry_count+1))
              echo "Push failed (Attempt ${retry_count}/${max_retries}). Will try to pull remote changes and re-push."
              
              # Before retrying push, try to reconcile with remote again
              # This time, a simple merge might be okay if the rebase attempt structured things,
              # or if we've already re-run main.py on a clean base.
              # Using rebase with autostash for safety.
              echo "Pulling remote changes again before retrying push..."
              git fetch origin
              if ! git rebase origin/${{ github.ref_name }} --autostash; then
                echo "Rebase before push retry failed. Aborting rebase and trying simple merge."
                git rebase --abort
                if ! git merge origin/${{ github.ref_name }} -m "Merge remote branch during push retry"; then
                   echo "::error::Merge also failed during push retry. Manual intervention likely needed for conflicts."
                   exit 1
                fi
              fi
              
              echo "Retrying push (${retry_count}/${max_retries})..."
              sleep $delay_seconds
            done

            if [ $retry_count -ge $max_retries ]; then
              echo "::error::Push failed after $max_retries attempts. Check repository for conflicts."
              exit 1
            fi
            echo "Changes pushed successfully."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for Deployable Changes
        id: check_changes
        run: |
          # Check if the last commit was by this bot and if there are actual content changes to deploy
          # The 'git diff --quiet HEAD^ HEAD -- public/' checks if 'public/' dir changed in the last commit.
          # Also check if the commit message indicates a script run (not just a merge or other bot activity)
          # This logic can be improved if you have specific commit messages for deploys vs. other bot commits.
          if git log -1 --pretty=%B | grep -q "Automated news update"; then
            if ! git diff --quiet HEAD^ HEAD -- public/ ; then
              echo "Deployable changes found in public/ directory."
              echo "deploy_needed=true" >> $GITHUB_OUTPUT
            else
              echo "Last commit was by bot but no changes in public/ directory. Skipping deploy."
              echo "deploy_needed=false" >> $GITHUB_OUTPUT
            fi
          else
             echo "Last commit not by this script's typical update or no commit made. Skipping deploy."
             echo "deploy_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Netlify CLI
        if: steps.check_changes.outputs.deploy_needed == 'true'
        run: |
          echo "Changes were committed that affect public/. Proceeding with Netlify deployment."
          npm install -g netlify-cli

      - name: Deploy to Netlify
        if: steps.check_changes.outputs.deploy_needed == 'true'
        run: netlify deploy --dir=public --prod --auth $NETLIFY_AUTH_TOKEN --site $NETLIFY_SITE_ID
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
