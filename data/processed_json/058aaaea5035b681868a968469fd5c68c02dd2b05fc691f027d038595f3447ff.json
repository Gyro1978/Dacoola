{
    "id": "058aaaea5035b681868a968469fd5c68c02dd2b05fc691f027d038595f3447ff",
    "title": "How Deutsche Bahn Revolutionizes Rail Operations with Time Series Forecasting AI",
    "link": "https://aws.amazon.com/blogs/machine-learning/how-deutsche-bahn-redefines-forecasting-using-chronos-models-now-available-on-amazon-bedrock-marketplace/",
    "published_iso": "2025-05-07T15:22:11Z",
    "summary": "<p><em>This post is co-written with Kilian Zimmerer and Daniel Ringler from Deutsche Bahn.</em></p> \n<p>Every day, Deutsche Bahn (DB) moves over 6.6 million passengers across Germany, requiring precise time series forecasting for a wide range of purposes. However, building accurate forecasting models traditionally required significant expertise and weeks of development time.</p> \n<p>Today, we’re excited to explore how the time series foundation model <a href=\"https://aws.amazon.com/blogs/machine-learning/fast-and-accurate-zero-shot-forecasting-with-chronos-bolt-and-autogluon/\" rel=\"noopener\" target=\"_blank\">Chronos-Bolt</a>, recently launched on <a href=\"https://aws.amazon.com/bedrock/marketplace/\" rel=\"noopener\" target=\"_blank\">Amazon Bedrock Marketplace</a> and available through <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/jumpstart-foundation-models-latest.html\" rel=\"noopener\" target=\"_blank\">Amazon SageMaker JumpStart,</a> is revolutionizing time series forecasting by enabling accurate predictions with minimal effort. Whereas traditional forecasting methods typically rely on statistical modeling, Chronos treats time series data as a language to be modeled and uses a pre-trained FM to generate forecasts — similar to how large language models (LLMs) generate texts. Chronos helps you achieve accurate predictions faster, significantly reducing development time compared to traditional methods.</p> \n<p>In this post, we share how Deutsche Bahn is redefining forecasting using Chronos models, and provide an example use case to demonstrate how you can get started using Chronos.</p> \n<h2>Chronos: Learning the language of time series</h2> \n<p>The Chronos model family represents a breakthrough in time series forecasting by using language model architectures. Unlike traditional time series forecasting models that require training on specific datasets, Chronos can be used for forecasting immediately. The original Chronos model quickly became the number #1 most downloaded model on Hugging Face in 2024, demonstrating the strong demand for FMs in time series forecasting.</p> \n<p>Building on this success, we recently launched <a href=\"https://aws.amazon.com/blogs/machine-learning/fast-and-accurate-zero-shot-forecasting-with-chronos-bolt-and-autogluon/\" rel=\"noopener\" target=\"_blank\">Chronos-Bolt</a>, which delivers higher zero-shot accuracy compared to original Chronos models. It offers the following improvements:</p> \n<ul> \n <li>Up to 250 times faster inference</li> \n <li>20 times better memory efficiency</li> \n <li>CPU deployment support, making hosting costs up to 10 times less expensive</li> \n</ul> \n<p>Now, you can use <a href=\"https://aws.amazon.com/bedrock/marketplace/\" rel=\"noopener\" target=\"_blank\">Amazon Bedrock Marketplace</a> to deploy Chronos-Bolt. Amazon Bedrock Marketplace is a new capability in <a href=\"https://aws.amazon.com/bedrock/\" rel=\"noopener\" target=\"_blank\">Amazon Bedrock</a> that enables developers to discover, test, and use over 100 popular, emerging, and specialized FMs alongside the current selection of industry-leading models in Amazon Bedrock.</p> \n<h2>The challenge</h2> \n<p><a href=\"https://www.deutschebahn.com/en\" rel=\"noopener\" target=\"_blank\">Deutsche Bahn</a>, Germany’s national railway company, serves over 1.8 billion passengers annually in long distance and regional rail passenger transport, making it one of the world’s largest railway operators. For more than a decade, Deutsche Bahn has been innovating together with AWS. AWS is the primary cloud provider for Deutsche Bahn and a strategic partner of DB Systel, a wholly owned subsidiary of DB AG that drives digitalization across all group companies.</p> \n<p>Previously, Deutsche Bahn’s forecasting processes were highly heterogeneous across teams, requiring significant effort for each new use case. Different data sources required using multiple specialized forecasting methods, resulting in cost- and time-intensive manual effort. Company-wide, Deutsche Bahn identified dozens of different and independently operated forecasting processes. Smaller teams found it hard to justify developing customized forecasting solutions for their specific needs.</p> \n<p>For example, the data analysis platform for passenger train stations of DB InfraGO AG integrates and analyzes diverse data sources, from weather data and SAP Plant Maintenance information to video analytics. Given the diverse data sources, a forecast method that was designed for one data source was usually not transferable to the other data sources.</p> \n<p>To democratize forecasting capabilities across the organization, Deutsche Bahn needed a more efficient and scalable approach to handle various forecasting scenarios. Using Chronos, Deutsche Bahn demonstrates how cutting-edge technology can transform enterprise-scale forecasting operations.</p> \n<h2>Solution overview</h2> \n<p>A team enrolled in Deutsche Bahn’s accelerator program Skydeck, the innovation lab of DB Systel, developed a time series FM forecasting system using Chronos as the underlying model, in partnership with DB InfraGO AG. This system offers a secured internal API that can be used by Deutsche Bahn teams across the organization for efficient and simple-to-use time series forecasts, without the need to develop customized software.</p> \n<p>The following diagram shows a simplified architecture of how Deutsche Bahn uses Chronos.</p> \n<p><img alt=\"Architecture diagram of the solution\" class=\"alignnone size-full wp-image-105324\" height=\"382\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/ml-18537-architecture.png\" width=\"1362\" /></p> \n<p>In the solution workflow, a user can pass timeseries data to <a href=\"https://aws.amazon.com/api-gateway/\" rel=\"noopener\" target=\"_blank\">Amazon API Gateway</a> which serves as a secure front door for API calls, handling authentication and authorization. For more information on how to limit access to an API to authorized users only, refer to <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-to-api.html\" rel=\"noopener\" target=\"_blank\">Control and manage access to REST APIs in API Gateway</a>. Then, an <a href=\"https://aws.amazon.com/lambda/\" rel=\"noopener\" target=\"_blank\">AWS Lambda</a> function is used as serverless compute for processing and passing requests to the Chronos model for inference. The fastest way to host a Chronos model is by using Amazon Bedrock Marketplace or SageMaker Jumpstart.</p> \n<h2>Impact and future plans</h2> \n<p>Deutsche Bahn tested the service on multiple use cases, such as predicting actual costs for construction projects and forecasting monthly revenue for retail operators in passenger stations. The implementation with Chronos models revealed compelling outcomes. The following table depicts the achieved results. In the first use case, we can observe that in zero-shot scenarios (meaning that the model has never seen the data before), Chronos models can achieve accuracy superior to established statistical methods like AutoARIMA and AutoETS, even though these methods were specifically trained on the data. Additionally, in both use cases, Chronos inference time is up to 100 times faster, and when fine-tuned, Chronos models outperform traditional approaches in both scenarios. For more details on fine-tuning Chronos, refer to <a href=\"https://auto.gluon.ai/dev/tutorials/timeseries/forecasting-chronos.html\" rel=\"noopener\" target=\"_blank\">Forecasting with Chronos – AutoGluon</a>.</p> \n<table border=\"1px\" cellpadding=\"4px\"> \n <tbody> \n  <tr style=\"background-color: #000000;\"> \n   <td>.</td> \n   <td><span style=\"color: #ffffff;\">Model</span></td> \n   <td><span style=\"color: #ffffff;\">Error (Lower is Better)</span></td> \n   <td><span style=\"color: #ffffff;\">Prediction Time (seconds)</span></td> \n   <td><span style=\"color: #ffffff;\">Training Time (seconds)</span></td> \n  </tr> \n  <tr> \n   <td colspan=\"1\" rowspan=\"6\">Deutsche Bahn test use case 1</td> \n   <td>AutoArima</td> \n   <td>0.202</td> \n   <td>40</td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>AutoETS</td> \n   <td>0.2</td> \n   <td>9.1</td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Small (Zero Shot)</td> \n   <td>0.195</td> \n   <td><strong>0.4</strong></td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Base (Zero Shot)</td> \n   <td>0.198</td> \n   <td>0.6</td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Small (Fine-Tuned)</td> \n   <td><strong>0.181</strong></td> \n   <td><strong>0.4</strong></td> \n   <td>650</td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Base (Fine-Tuned)</td> \n   <td>0.186</td> \n   <td>0.6</td> \n   <td>1328</td> \n  </tr> \n  <tr> \n   <td colspan=\"1\" rowspan=\"6\">Deutsche Bahn test use case 2</td> \n   <td>AutoArima</td> \n   <td>0.13</td> \n   <td>100</td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>AutoETS</td> \n   <td>0.136</td> \n   <td>18</td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Small (Zero Shot)</td> \n   <td>0.197</td> \n   <td><strong>0.7</strong></td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Base (Zero Shot)</td> \n   <td>0.185</td> \n   <td>1.2</td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Small (Fine-Tuned)</td> \n   <td>0.134</td> \n   <td><strong>0.7</strong></td> \n   <td>1012</td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Base (Fine-Tuned)</td> \n   <td><strong>0.127</strong></td> \n   <td>1.2</td> \n   <td>1893</td> \n  </tr> \n </tbody> \n</table> \n<p><span style=\"color: #4d4d4d;\">Error is measured in SMAPE. Finetuning was stopped after 10,000 steps.</span></p> \n<p>Based on the successful prototype, Deutsche Bahn is developing a company-wide forecasting service accessible to all DB business units, supporting different forecasting scenarios. Importantly, this will democratize the usage of forecasting across the organization. Previously resource-constrained teams are now empowered to generate their own forecasts, and forecast preparation time can be reduced from weeks to hours.</p> \n<h2>Example use case</h2> \n<p>Let’s walk through a practical example of using Chronos-Bolt with Amazon Bedrock Marketplace. We will forecast passenger capacity utilization at German long-distance and regional train stations using publicly available <a href=\"https://mobilithek.info/offers/573351169210855424\" rel=\"noopener\" target=\"_blank\">data.</a></p> \n<h2>Prerequisites</h2> \n<p>For this, you will use the AWS SDK for Python (Boto3) to programmatically interact with Amazon Bedrock. As prerequisites, you need to have the Python libraries <code>boto3</code>, <code>pandas</code>, and <code>matplotlib</code> installed. In addition, configure a connection to an AWS account such that Boto3 can use Amazon Bedrock. For more information on how to setup Boto3, refer to <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/quickstart.html\" rel=\"noopener\" target=\"_blank\">Quickstart – Boto3</a>. If you are using Python inside an <a href=\"https://aws.amazon.com/sagemaker-ai/notebooks\" rel=\"noopener\" target=\"_blank\">Amazon SageMaker notebook</a>, the necessary packages are already installed.</p> \n<h2>Forecast passenger capacity</h2> \n<p>First, load the data with the historical passenger capacity utilization. For this example, focus on train station 239:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\">import pandas as pd\n\n# Load data\ndf = pd.read_csv(\n    \"https://mobilithek.info/mdp-api/files/aux/573351169210855424/benchmark_personenauslastung_bahnhoefe_training.csv\"\n)\ndf_train_station = df[df[\"train_station\"] == 239].reset_index(drop=True)</code></pre> \n</div> \n<p>Next, deploy an endpoint on Amazon Bedrock Marketplace containing Chronos-Bolt. This endpoint acts as a hosted service, meaning that it can receive requests containing time series data and return forecasts in response.</p> \n<p>Amazon Bedrock will assume an <a href=\"https://aws.amazon.com/iam/\" rel=\"noopener\" target=\"_blank\">AWS Identity and Access Management</a> (IAM) role to provision the endpoint. Modify the following code to reference your role. For a tutorial on creating an execution role, refer to <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html\" rel=\"noopener\" target=\"_blank\">How to use SageMaker AI execution roles. </a></p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\">import boto3\nimport time\n\ndef describe_endpoint(bedrock_client, endpoint_arn):\n    return bedrock_client.get_marketplace_model_endpoint(endpointArn=endpoint_arn)[\n        \"marketplaceModelEndpoint\"\n    ]\n\ndef wait_for_endpoint(bedrock_client, endpoint_arn):\n    endpoint = describe_endpoint(bedrock_client, endpoint_arn)\n    while endpoint[\"endpointStatus\"] in [\"Creating\", \"Updating\"]:\n        print(\n            f\"Endpoint {endpoint_arn} status is still {endpoint['endpointStatus']}.\"\n            \"Waiting 10 seconds before continuing...\"\n        )\n        time.sleep(10)\n        endpoint = describe_endpoint(bedrock_client, endpoint_arn)\n    print(f\"Endpoint status: {endpoint['status']}\")\n\nbedrock_client = boto3.client(service_name=\"bedrock\")\nregion_name = bedrock_client.meta.region_name\nexecutionRole = \"arn:aws:iam::account-id:role/ExecutionRole\" # Change to your role\n\n# Deploy Endpoint\nbody = {\n        \"modelSourceIdentifier\": f\"arn:aws:sagemaker:{region_name}:aws:hub-content/SageMakerPublicHub/Model/autogluon-forecasting-chronos-bolt-base/2.0.0\",\n        \"endpointConfig\": {\n            \"sageMaker\": {\n                \"initialInstanceCount\": 1,\n                \"instanceType\": \"ml.m5.xlarge\",\n                \"executionRole\": executionRole,\n        }\n    },\n    \"endpointName\": \"brmp-chronos-endpoint\",\n    \"acceptEula\": True,\n }\nresponse = bedrock_client.create_marketplace_model_endpoint(**body)\nendpoint_arn = response[\"marketplaceModelEndpoint\"][\"endpointArn\"]\n\n# Wait until the endpoint is created. This will take a few minutes.\nwait_for_endpoint(bedrock_client, endpoint_arn)</code></pre> \n</div> \n<p>Then, invoke the endpoint to make a forecast. Send a payload to the endpoint, which includes historical time series values and configuration parameters, such as the prediction length and quantile levels. The endpoint processes this input and returns a response containing the forecasted values based on the provided data.</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\">import json\n\n# Query endpoint\nbedrock_runtime_client = boto3.client(service_name=\"bedrock-runtime\")\nbody = json.dumps(\n    {\n        \"inputs\": [\n            {\"target\": df_train_station[\"capacity\"].values.tolist()},\n        ],\n        \"parameters\": {\n            \"prediction_length\": 64,\n            \"quantile_levels\": [0.1, 0.5, 0.9],\n        }\n    }\n)\nresponse = bedrock_runtime_client.invoke_model(modelId=endpoint_arn, body=body)\nresponse_body = json.loads(response[\"body\"].read())  </code></pre> \n</div> \n<p>Now you can visualize the forecasts generated by Chronos-Bolt.</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\">import matplotlib.pyplot as plt\n\n# Plot forecast\nforecast_index = range(len(df_train_station), len(df_train_station) + 64)\nlow = response_body[\"predictions\"][0][\"0.1\"]\nmedian = response_body[\"predictions\"][0][\"0.5\"]\nhigh = response_body[\"predictions\"][0][\"0.9\"]\n\nplt.figure(figsize=(8, 4))\nplt.plot(df_train_station[\"capacity\"], color=\"royalblue\", label=\"historical data\")\nplt.plot(forecast_index, median, color=\"tomato\", label=\"median forecast\")\nplt.fill_between(\n    forecast_index,\n    low,\n    high,\n    color=\"tomato\",\n    alpha=0.3,\n    label=\"80% prediction interval\",\n)\nplt.legend(loc='upper left')\nplt.grid()\nplt.show()</code></pre> \n</div> \n<p>The following figure shows the output.</p> \n<p><img alt=\"Plot of the predictions\" class=\"alignnone size-full wp-image-105325\" height=\"400\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/ml-18537-results.png\" width=\"800\" /></p> \n<p>As we can see on the right-hand side of the preceding graph in red, the model is able to pick up the pattern that we can visually recognize on the left part of the plot (in blue). The Chronos model predicts a steep decline followed by two smaller spikes. It is worth highlighting that the model successfully predicted this pattern using zero-shot inference, that is, without being trained on the data. Going back to the original prediction task, we can interpret that this particular train station is underutilized on weekends.</p> \n<h2>Clean up</h2> \n<p>To avoid incurring unnecessary costs, use the following code to delete the model endpoint:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\">bedrock_client.delete_marketplace_model_endpoint(endpointArn=endpoint_arn)\n\n# Confirm that endpoint is deleted\ntime.sleep(5)\ntry:\n    endpoint = describe_endpoint(bedrock_client, endpoint_arn=endpoint_arn)\n    print(endpoint[\"endpointStatus\"])\nexcept ClientError as err:\n    assert err.response['Error']['Code'] =='ResourceNotFoundException'\n    print(f\"Confirmed that endpoint {endpoint_arn} was deleted\")</code></pre> \n</div> \n<h2>Conclusion</h2> \n<p>The Chronos family of models, particularly the new Chronos-Bolt model, represents a significant advancement in making accurate time series forecasting accessible. Through the simple deployment options with Amazon Bedrock Marketplace and SageMaker JumpStart, organizations can now implement sophisticated forecasting solutions in hours rather than weeks, while achieving state-of-the-art accuracy.</p> \n<p>Whether you’re forecasting retail demand, optimizing operations, or planning resource allocation, Chronos models provide a powerful and efficient solution that can scale with your needs.</p> \n<hr /> \n<h3>About the authors</h3> \n<p style=\"clear: both;\"><img alt=\"\" class=\"size-full wp-image-105352 alignleft\" height=\"100\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/kilian100.jpeg\" width=\"100\" /><strong>Kilian Zimmerer</strong> is an AI and DevOps Engineer at DB Systel GmbH in Berlin. With his expertise in state-of-the-art machine learning and deep learning, alongside DevOps infrastructure management, he drives projects, defines their technical vision, and supports their successful implementation within Deutsche Bahn.</p> \n<p style=\"clear: both;\"><img alt=\"\" class=\"size-full wp-image-105353 alignleft\" height=\"132\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/daniel100.jpeg\" width=\"100\" /><strong>Daniel Ringler</strong> is a software engineer specializing in machine learning at DB Systel GmbH in Berlin. In addition to his professional work, he is a volunteer organizer for PyData Berlin, contributing to the local data science and Python programming community.</p> \n<p style=\"clear: both;\"><img alt=\"\" class=\"size-full wp-image-105356 alignleft\" height=\"136\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/pedro100.jpeg\" width=\"100\" /><strong>Pedro Eduardo Mercado Lopez</strong> is an Applied Scientist at Amazon Web Services, where he works on time series forecasting for labor planning and capacity planning with a focus on hierarchical time series and foundation models. He received a PhD from Saarland University, Germany, doing research in spectral clustering for signed and multilayer graphs.</p> \n<p style=\"clear: both;\"><img alt=\"\" class=\"size-full wp-image-105354 alignleft\" height=\"133\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/simeon.jpeg\" width=\"100\" /><a href=\"https://www.linkedin.com/in/simeon-br/\" rel=\"noopener\" target=\"_blank\"><strong>Simeon Brüggenjürgen</strong></a> is a Solutions Architect at Amazon Web Services based in Munich, Germany. With a background in Machine Learning research, Simeon supported Deutsche Bahn on this project.</p> \n<p style=\"clear: both;\"><img alt=\"\" class=\"size-full wp-image-105349 alignleft\" height=\"111\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/john100.jpeg\" width=\"100\" /><strong>John Liu</strong> has 15 years of experience as a product executive and 9 years of experience as a portfolio manager. At AWS, John is a Principal Product Manager for Amazon Bedrock. Previously, he was the Head of Product for AWS Web3 / Blockchain. Prior to AWS, John held various product leadership roles at public blockchain protocols, fintech companies and also spent 9 years as a portfolio manager at various hedge funds.</p> \n<p style=\"clear: both;\"><img alt=\"\" class=\"size-full wp-image-105350 alignleft\" height=\"130\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/michael100.jpg\" width=\"100\" /><strong>Michael Bohlke-Schneider</strong> is an Applied Science Manager at Amazon Web Services. At AWS, Michael works on machine learning and forecasting, with a focus on foundation models for structured data and AutoML. He received his PhD from the Technical University Berlin, where he worked on protein structure prediction.</p> \n<p style=\"clear: both;\"><img alt=\"\" class=\"size-full wp-image-105351 alignleft\" height=\"133\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/florian100.jpg\" width=\"100\" /><strong>Florian Saupe</strong> is a Principal Technical Product Manager at AWS AI/ML research supporting science teams like the graph machine learning group, and ML Systems teams working on large scale distributed training, inference, and fault resilience. Before joining AWS, Florian lead technical product management for automated driving at Bosch, was a strategy consultant at McKinsey & Company, and worked as a control systems and robotics scientist—a field in which he holds a PhD.</p>",
    "full_text_content": "AWS Machine Learning Blog\nHow Deutsche Bahn redefines forecasting using Chronos models – Now available on Amazon Bedrock Marketplace\nThis post is co-written with Kilian Zimmerer and Daniel Ringler from Deutsche Bahn.\nEvery day, Deutsche Bahn (DB) moves over 6.6 million passengers across Germany, requiring precise time series forecasting for a wide range of purposes. However, building accurate forecasting models traditionally required significant expertise and weeks of development time.\nToday, we’re excited to explore how the time series foundation model Chronos-Bolt, recently launched on Amazon Bedrock Marketplace and available through Amazon SageMaker JumpStart, is revolutionizing time series forecasting by enabling accurate predictions with minimal effort. Whereas traditional forecasting methods typically rely on statistical modeling, Chronos treats time series data as a language to be modeled and uses a pre-trained FM to generate forecasts — similar to how large language models (LLMs) generate texts. Chronos helps you achieve accurate predictions faster, significantly reducing development time compared to traditional methods.\nIn this post, we share how Deutsche Bahn is redefining forecasting using Chronos models, and provide an example use case to demonstrate how you can get started using Chronos.\nChronos: Learning the language of time series\nThe Chronos model family represents a breakthrough in time series forecasting by using language model architectures. Unlike traditional time series forecasting models that require training on specific datasets, Chronos can be used for forecasting immediately. The original Chronos model quickly became the number #1 most downloaded model on Hugging Face in 2024, demonstrating the strong demand for FMs in time series forecasting.\nBuilding on this success, we recently launched Chronos-Bolt, which delivers higher zero-shot accuracy compared to original Chronos models. It offers the following improvements:\n- Up to 250 times faster inference\n- 20 times better memory efficiency\n- CPU deployment support, making hosting costs up to 10 times less expensive\nNow, you can use Amazon Bedrock Marketplace to deploy Chronos-Bolt. Amazon Bedrock Marketplace is a new capability in Amazon Bedrock that enables developers to discover, test, and use over 100 popular, emerging, and specialized FMs alongside the current selection of industry-leading models in Amazon Bedrock.\nThe challenge\nDeutsche Bahn, Germany’s national railway company, serves over 1.8 billion passengers annually in long distance and regional rail passenger transport, making it one of the world’s largest railway operators. For more than a decade, Deutsche Bahn has been innovating together with AWS. AWS is the primary cloud provider for Deutsche Bahn and a strategic partner of DB Systel, a wholly owned subsidiary of DB AG that drives digitalization across all group companies.\nPreviously, Deutsche Bahn’s forecasting processes were highly heterogeneous across teams, requiring significant effort for each new use case. Different data sources required using multiple specialized forecasting methods, resulting in cost- and time-intensive manual effort. Company-wide, Deutsche Bahn identified dozens of different and independently operated forecasting processes. Smaller teams found it hard to justify developing customized forecasting solutions for their specific needs.\nFor example, the data analysis platform for passenger train stations of DB InfraGO AG integrates and analyzes diverse data sources, from weather data and SAP Plant Maintenance information to video analytics. Given the diverse data sources, a forecast method that was designed for one data source was usually not transferable to the other data sources.\nTo democratize forecasting capabilities across the organization, Deutsche Bahn needed a more efficient and scalable approach to handle various forecasting scenarios. Using Chronos, Deutsche Bahn demonstrates how cutting-edge technology can transform enterprise-scale forecasting operations.\nSolution overview\nA team enrolled in Deutsche Bahn’s accelerator program Skydeck, the innovation lab of DB Systel, developed a time series FM forecasting system using Chronos as the underlying model, in partnership with DB InfraGO AG. This system offers a secured internal API that can be used by Deutsche Bahn teams across the organization for efficient and simple-to-use time series forecasts, without the need to develop customized software.\nThe following diagram shows a simplified architecture of how Deutsche Bahn uses Chronos.\nIn the solution workflow, a user can pass timeseries data to Amazon API Gateway which serves as a secure front door for API calls, handling authentication and authorization. For more information on how to limit access to an API to authorized users only, refer to Control and manage access to REST APIs in API Gateway. Then, an AWS Lambda function is used as serverless compute for processing and passing requests to the Chronos model for inference. The fastest way to host a Chronos model is by using Amazon Bedrock Marketplace or SageMaker Jumpstart.\nImpact and future plans\nDeutsche Bahn tested the service on multiple use cases, such as predicting actual costs for construction projects and forecasting monthly revenue for retail operators in passenger stations. The implementation with Chronos models revealed compelling outcomes. The following table depicts the achieved results. In the first use case, we can observe that in zero-shot scenarios (meaning that the model has never seen the data before), Chronos models can achieve accuracy superior to established statistical methods like AutoARIMA and AutoETS, even though these methods were specifically trained on the data. Additionally, in both use cases, Chronos inference time is up to 100 times faster, and when fine-tuned, Chronos models outperform traditional approaches in both scenarios. For more details on fine-tuning Chronos, refer to Forecasting with Chronos – AutoGluon.\nError is measured in SMAPE. Finetuning was stopped after 10,000 steps.\nBased on the successful prototype, Deutsche Bahn is developing a company-wide forecasting service accessible to all DB business units, supporting different forecasting scenarios. Importantly, this will democratize the usage of forecasting across the organization. Previously resource-constrained teams are now empowered to generate their own forecasts, and forecast preparation time can be reduced from weeks to hours.\nExample use case\nLet’s walk through a practical example of using Chronos-Bolt with Amazon Bedrock Marketplace. We will forecast passenger capacity utilization at German long-distance and regional train stations using publicly available data.\nPrerequisites\nFor this, you will use the AWS SDK for Python (Boto3) to programmatically interact with Amazon Bedrock. As prerequisites, you need to have the Python libraries boto3\n, pandas\n, and matplotlib\ninstalled. In addition, configure a connection to an AWS account such that Boto3 can use Amazon Bedrock. For more information on how to setup Boto3, refer to Quickstart – Boto3. If you are using Python inside an Amazon SageMaker notebook, the necessary packages are already installed.\nForecast passenger capacity\nFirst, load the data with the historical passenger capacity utilization. For this example, focus on train station 239:\nNext, deploy an endpoint on Amazon Bedrock Marketplace containing Chronos-Bolt. This endpoint acts as a hosted service, meaning that it can receive requests containing time series data and return forecasts in response.\nAmazon Bedrock will assume an AWS Identity and Access Management (IAM) role to provision the endpoint. Modify the following code to reference your role. For a tutorial on creating an execution role, refer to How to use SageMaker AI execution roles.\nThen, invoke the endpoint to make a forecast. Send a payload to the endpoint, which includes historical time series values and configuration parameters, such as the prediction length and quantile levels. The endpoint processes this input and returns a response containing the forecasted values based on the provided data.\nNow you can visualize the forecasts generated by Chronos-Bolt.\nThe following figure shows the output.\nAs we can see on the right-hand side of the preceding graph in red, the model is able to pick up the pattern that we can visually recognize on the left part of the plot (in blue). The Chronos model predicts a steep decline followed by two smaller spikes. It is worth highlighting that the model successfully predicted this pattern using zero-shot inference, that is, without being trained on the data. Going back to the original prediction task, we can interpret that this particular train station is underutilized on weekends.\nClean up\nTo avoid incurring unnecessary costs, use the following code to delete the model endpoint:\nConclusion\nThe Chronos family of models, particularly the new Chronos-Bolt model, represents a significant advancement in making accurate time series forecasting accessible. Through the simple deployment options with Amazon Bedrock Marketplace and SageMaker JumpStart, organizations can now implement sophisticated forecasting solutions in hours rather than weeks, while achieving state-of-the-art accuracy.\nWhether you’re forecasting retail demand, optimizing operations, or planning resource allocation, Chronos models provide a powerful and efficient solution that can scale with your needs.\nAbout the authors\nKilian Zimmerer is an AI and DevOps Engineer at DB Systel GmbH in Berlin. With his expertise in state-of-the-art machine learning and deep learning, alongside DevOps infrastructure management, he drives projects, defines their technical vision, and supports their successful implementation within Deutsche Bahn.\nDaniel Ringler is a software engineer specializing in machine learning at DB Systel GmbH in Berlin. In addition to his professional work, he is a volunteer organizer for PyData Berlin, contributing to the local data science and Python programming community.\nPedro Eduardo Mercado Lopez is an Applied Scientist at Amazon Web Services, where he works on time series forecasting for labor planning and capacity planning with a focus on hierarchical time series and foundation models. He received a PhD from Saarland University, Germany, doing research in spectral clustering for signed and multilayer graphs.\nSimeon Brüggenjürgen is a Solutions Architect at Amazon Web Services based in Munich, Germany. With a background in Machine Learning research, Simeon supported Deutsche Bahn on this project.\nJohn Liu has 15 years of experience as a product executive and 9 years of experience as a portfolio manager. At AWS, John is a Principal Product Manager for Amazon Bedrock. Previously, he was the Head of Product for AWS Web3 / Blockchain. Prior to AWS, John held various product leadership roles at public blockchain protocols, fintech companies and also spent 9 years as a portfolio manager at various hedge funds.\nMichael Bohlke-Schneider is an Applied Science Manager at Amazon Web Services. At AWS, Michael works on machine learning and forecasting, with a focus on foundation models for structured data and AutoML. He received his PhD from the Technical University Berlin, where he worked on protein structure prediction.\nFlorian Saupe is a Principal Technical Product Manager at AWS AI/ML research supporting science teams like the graph machine learning group, and ML Systems teams working on large scale distributed training, inference, and fault resilience. Before joining AWS, Florian lead technical product management for automated driving at Bosch, was a strategy consultant at McKinsey & Company, and worked as a control systems and robotics scientist—a field in which he holds a PhD.",
    "content_for_processing": "<p><em>This post is co-written with Kilian Zimmerer and Daniel Ringler from Deutsche Bahn.</em></p> \n<p>Every day, Deutsche Bahn (DB) moves over 6.6 million passengers across Germany, requiring precise time series forecasting for a wide range of purposes. However, building accurate forecasting models traditionally required significant expertise and weeks of development time.</p> \n<p>Today, we’re excited to explore how the time series foundation model <a href=\"https://aws.amazon.com/blogs/machine-learning/fast-and-accurate-zero-shot-forecasting-with-chronos-bolt-and-autogluon/\" rel=\"noopener\" target=\"_blank\">Chronos-Bolt</a>, recently launched on <a href=\"https://aws.amazon.com/bedrock/marketplace/\" rel=\"noopener\" target=\"_blank\">Amazon Bedrock Marketplace</a> and available through <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/jumpstart-foundation-models-latest.html\" rel=\"noopener\" target=\"_blank\">Amazon SageMaker JumpStart,</a> is revolutionizing time series forecasting by enabling accurate predictions with minimal effort. Whereas traditional forecasting methods typically rely on statistical modeling, Chronos treats time series data as a language to be modeled and uses a pre-trained FM to generate forecasts — similar to how large language models (LLMs) generate texts. Chronos helps you achieve accurate predictions faster, significantly reducing development time compared to traditional methods.</p> \n<p>In this post, we share how Deutsche Bahn is redefining forecasting using Chronos models, and provide an example use case to demonstrate how you can get started using Chronos.</p> \n<h2>Chronos: Learning the language of time series</h2> \n<p>The Chronos model family represents a breakthrough in time series forecasting by using language model architectures. Unlike traditional time series forecasting models that require training on specific datasets, Chronos can be used for forecasting immediately. The original Chronos model quickly became the number #1 most downloaded model on Hugging Face in 2024, demonstrating the strong demand for FMs in time series forecasting.</p> \n<p>Building on this success, we recently launched <a href=\"https://aws.amazon.com/blogs/machine-learning/fast-and-accurate-zero-shot-forecasting-with-chronos-bolt-and-autogluon/\" rel=\"noopener\" target=\"_blank\">Chronos-Bolt</a>, which delivers higher zero-shot accuracy compared to original Chronos models. It offers the following improvements:</p> \n<ul> \n <li>Up to 250 times faster inference</li> \n <li>20 times better memory efficiency</li> \n <li>CPU deployment support, making hosting costs up to 10 times less expensive</li> \n</ul> \n<p>Now, you can use <a href=\"https://aws.amazon.com/bedrock/marketplace/\" rel=\"noopener\" target=\"_blank\">Amazon Bedrock Marketplace</a> to deploy Chronos-Bolt. Amazon Bedrock Marketplace is a new capability in <a href=\"https://aws.amazon.com/bedrock/\" rel=\"noopener\" target=\"_blank\">Amazon Bedrock</a> that enables developers to discover, test, and use over 100 popular, emerging, and specialized FMs alongside the current selection of industry-leading models in Amazon Bedrock.</p> \n<h2>The challenge</h2> \n<p><a href=\"https://www.deutschebahn.com/en\" rel=\"noopener\" target=\"_blank\">Deutsche Bahn</a>, Germany’s national railway company, serves over 1.8 billion passengers annually in long distance and regional rail passenger transport, making it one of the world’s largest railway operators. For more than a decade, Deutsche Bahn has been innovating together with AWS. AWS is the primary cloud provider for Deutsche Bahn and a strategic partner of DB Systel, a wholly owned subsidiary of DB AG that drives digitalization across all group companies.</p> \n<p>Previously, Deutsche Bahn’s forecasting processes were highly heterogeneous across teams, requiring significant effort for each new use case. Different data sources required using multiple specialized forecasting methods, resulting in cost- and time-intensive manual effort. Company-wide, Deutsche Bahn identified dozens of different and independently operated forecasting processes. Smaller teams found it hard to justify developing customized forecasting solutions for their specific needs.</p> \n<p>For example, the data analysis platform for passenger train stations of DB InfraGO AG integrates and analyzes diverse data sources, from weather data and SAP Plant Maintenance information to video analytics. Given the diverse data sources, a forecast method that was designed for one data source was usually not transferable to the other data sources.</p> \n<p>To democratize forecasting capabilities across the organization, Deutsche Bahn needed a more efficient and scalable approach to handle various forecasting scenarios. Using Chronos, Deutsche Bahn demonstrates how cutting-edge technology can transform enterprise-scale forecasting operations.</p> \n<h2>Solution overview</h2> \n<p>A team enrolled in Deutsche Bahn’s accelerator program Skydeck, the innovation lab of DB Systel, developed a time series FM forecasting system using Chronos as the underlying model, in partnership with DB InfraGO AG. This system offers a secured internal API that can be used by Deutsche Bahn teams across the organization for efficient and simple-to-use time series forecasts, without the need to develop customized software.</p> \n<p>The following diagram shows a simplified architecture of how Deutsche Bahn uses Chronos.</p> \n<p><img alt=\"Architecture diagram of the solution\" class=\"alignnone size-full wp-image-105324\" height=\"382\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/ml-18537-architecture.png\" width=\"1362\" /></p> \n<p>In the solution workflow, a user can pass timeseries data to <a href=\"https://aws.amazon.com/api-gateway/\" rel=\"noopener\" target=\"_blank\">Amazon API Gateway</a> which serves as a secure front door for API calls, handling authentication and authorization. For more information on how to limit access to an API to authorized users only, refer to <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-to-api.html\" rel=\"noopener\" target=\"_blank\">Control and manage access to REST APIs in API Gateway</a>. Then, an <a href=\"https://aws.amazon.com/lambda/\" rel=\"noopener\" target=\"_blank\">AWS Lambda</a> function is used as serverless compute for processing and passing requests to the Chronos model for inference. The fastest way to host a Chronos model is by using Amazon Bedrock Marketplace or SageMaker Jumpstart.</p> \n<h2>Impact and future plans</h2> \n<p>Deutsche Bahn tested the service on multiple use cases, such as predicting actual costs for construction projects and forecasting monthly revenue for retail operators in passenger stations. The implementation with Chronos models revealed compelling outcomes. The following table depicts the achieved results. In the first use case, we can observe that in zero-shot scenarios (meaning that the model has never seen the data before), Chronos models can achieve accuracy superior to established statistical methods like AutoARIMA and AutoETS, even though these methods were specifically trained on the data. Additionally, in both use cases, Chronos inference time is up to 100 times faster, and when fine-tuned, Chronos models outperform traditional approaches in both scenarios. For more details on fine-tuning Chronos, refer to <a href=\"https://auto.gluon.ai/dev/tutorials/timeseries/forecasting-chronos.html\" rel=\"noopener\" target=\"_blank\">Forecasting with Chronos – AutoGluon</a>.</p> \n<table border=\"1px\" cellpadding=\"4px\"> \n <tbody> \n  <tr style=\"background-color: #000000;\"> \n   <td>.</td> \n   <td><span style=\"color: #ffffff;\">Model</span></td> \n   <td><span style=\"color: #ffffff;\">Error (Lower is Better)</span></td> \n   <td><span style=\"color: #ffffff;\">Prediction Time (seconds)</span></td> \n   <td><span style=\"color: #ffffff;\">Training Time (seconds)</span></td> \n  </tr> \n  <tr> \n   <td colspan=\"1\" rowspan=\"6\">Deutsche Bahn test use case 1</td> \n   <td>AutoArima</td> \n   <td>0.202</td> \n   <td>40</td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>AutoETS</td> \n   <td>0.2</td> \n   <td>9.1</td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Small (Zero Shot)</td> \n   <td>0.195</td> \n   <td><strong>0.4</strong></td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Base (Zero Shot)</td> \n   <td>0.198</td> \n   <td>0.6</td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Small (Fine-Tuned)</td> \n   <td><strong>0.181</strong></td> \n   <td><strong>0.4</strong></td> \n   <td>650</td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Base (Fine-Tuned)</td> \n   <td>0.186</td> \n   <td>0.6</td> \n   <td>1328</td> \n  </tr> \n  <tr> \n   <td colspan=\"1\" rowspan=\"6\">Deutsche Bahn test use case 2</td> \n   <td>AutoArima</td> \n   <td>0.13</td> \n   <td>100</td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>AutoETS</td> \n   <td>0.136</td> \n   <td>18</td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Small (Zero Shot)</td> \n   <td>0.197</td> \n   <td><strong>0.7</strong></td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Base (Zero Shot)</td> \n   <td>0.185</td> \n   <td>1.2</td> \n   <td><span style=\"color: #ffffff;\">.</span></td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Small (Fine-Tuned)</td> \n   <td>0.134</td> \n   <td><strong>0.7</strong></td> \n   <td>1012</td> \n  </tr> \n  <tr> \n   <td>Chronos Bolt Base (Fine-Tuned)</td> \n   <td><strong>0.127</strong></td> \n   <td>1.2</td> \n   <td>1893</td> \n  </tr> \n </tbody> \n</table> \n<p><span style=\"color: #4d4d4d;\">Error is measured in SMAPE. Finetuning was stopped after 10,000 steps.</span></p> \n<p>Based on the successful prototype, Deutsche Bahn is developing a company-wide forecasting service accessible to all DB business units, supporting different forecasting scenarios. Importantly, this will democratize the usage of forecasting across the organization. Previously resource-constrained teams are now empowered to generate their own forecasts, and forecast preparation time can be reduced from weeks to hours.</p> \n<h2>Example use case</h2> \n<p>Let’s walk through a practical example of using Chronos-Bolt with Amazon Bedrock Marketplace. We will forecast passenger capacity utilization at German long-distance and regional train stations using publicly available <a href=\"https://mobilithek.info/offers/573351169210855424\" rel=\"noopener\" target=\"_blank\">data.</a></p> \n<h2>Prerequisites</h2> \n<p>For this, you will use the AWS SDK for Python (Boto3) to programmatically interact with Amazon Bedrock. As prerequisites, you need to have the Python libraries <code>boto3</code>, <code>pandas</code>, and <code>matplotlib</code> installed. In addition, configure a connection to an AWS account such that Boto3 can use Amazon Bedrock. For more information on how to setup Boto3, refer to <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/quickstart.html\" rel=\"noopener\" target=\"_blank\">Quickstart – Boto3</a>. If you are using Python inside an <a href=\"https://aws.amazon.com/sagemaker-ai/notebooks\" rel=\"noopener\" target=\"_blank\">Amazon SageMaker notebook</a>, the necessary packages are already installed.</p> \n<h2>Forecast passenger capacity</h2> \n<p>First, load the data with the historical passenger capacity utilization. For this example, focus on train station 239:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\">import pandas as pd\n\n# Load data\ndf = pd.read_csv(\n    \"https://mobilithek.info/mdp-api/files/aux/573351169210855424/benchmark_personenauslastung_bahnhoefe_training.csv\"\n)\ndf_train_station = df[df[\"train_station\"] == 239].reset_index(drop=True)</code></pre> \n</div> \n<p>Next, deploy an endpoint on Amazon Bedrock Marketplace containing Chronos-Bolt. This endpoint acts as a hosted service, meaning that it can receive requests containing time series data and return forecasts in response.</p> \n<p>Amazon Bedrock will assume an <a href=\"https://aws.amazon.com/iam/\" rel=\"noopener\" target=\"_blank\">AWS Identity and Access Management</a> (IAM) role to provision the endpoint. Modify the following code to reference your role. For a tutorial on creating an execution role, refer to <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html\" rel=\"noopener\" target=\"_blank\">How to use SageMaker AI execution roles. </a></p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\">import boto3\nimport time\n\ndef describe_endpoint(bedrock_client, endpoint_arn):\n    return bedrock_client.get_marketplace_model_endpoint(endpointArn=endpoint_arn)[\n        \"marketplaceModelEndpoint\"\n    ]\n\ndef wait_for_endpoint(bedrock_client, endpoint_arn):\n    endpoint = describe_endpoint(bedrock_client, endpoint_arn)\n    while endpoint[\"endpointStatus\"] in [\"Creating\", \"Updating\"]:\n        print(\n            f\"Endpoint {endpoint_arn} status is still {endpoint['endpointStatus']}.\"\n            \"Waiting 10 seconds before continuing...\"\n        )\n        time.sleep(10)\n        endpoint = describe_endpoint(bedrock_client, endpoint_arn)\n    print(f\"Endpoint status: {endpoint['status']}\")\n\nbedrock_client = boto3.client(service_name=\"bedrock\")\nregion_name = bedrock_client.meta.region_name\nexecutionRole = \"arn:aws:iam::account-id:role/ExecutionRole\" # Change to your role\n\n# Deploy Endpoint\nbody = {\n        \"modelSourceIdentifier\": f\"arn:aws:sagemaker:{region_name}:aws:hub-content/SageMakerPublicHub/Model/autogluon-forecasting-chronos-bolt-base/2.0.0\",\n        \"endpointConfig\": {\n            \"sageMaker\": {\n                \"initialInstanceCount\": 1,\n                \"instanceType\": \"ml.m5.xlarge\",\n                \"executionRole\": executionRole,\n        }\n    },\n    \"endpointName\": \"brmp-chronos-endpoint\",\n    \"acceptEula\": True,\n }\nresponse = bedrock_client.create_marketplace_model_endpoint(**body)\nendpoint_arn = response[\"marketplaceModelEndpoint\"][\"endpointArn\"]\n\n# Wait until the endpoint is created. This will take a few minutes.\nwait_for_endpoint(bedrock_client, endpoint_arn)</code></pre> \n</div> \n<p>Then, invoke the endpoint to make a forecast. Send a payload to the endpoint, which includes historical time series values and configuration parameters, such as the prediction length and quantile levels. The endpoint processes this input and returns a response containing the forecasted values based on the provided data.</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\">import json\n\n# Query endpoint\nbedrock_runtime_client = boto3.client(service_name=\"bedrock-runtime\")\nbody = json.dumps(\n    {\n        \"inputs\": [\n            {\"target\": df_train_station[\"capacity\"].values.tolist()},\n        ],\n        \"parameters\": {\n            \"prediction_length\": 64,\n            \"quantile_levels\": [0.1, 0.5, 0.9],\n        }\n    }\n)\nresponse = bedrock_runtime_client.invoke_model(modelId=endpoint_arn, body=body)\nresponse_body = json.loads(response[\"body\"].read())  </code></pre> \n</div> \n<p>Now you can visualize the forecasts generated by Chronos-Bolt.</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\">import matplotlib.pyplot as plt\n\n# Plot forecast\nforecast_index = range(len(df_train_station), len(df_train_station) + 64)\nlow = response_body[\"predictions\"][0][\"0.1\"]\nmedian = response_body[\"predictions\"][0][\"0.5\"]\nhigh = response_body[\"predictions\"][0][\"0.9\"]\n\nplt.figure(figsize=(8, 4))\nplt.plot(df_train_station[\"capacity\"], color=\"royalblue\", label=\"historical data\")\nplt.plot(forecast_index, median, color=\"tomato\", label=\"median forecast\")\nplt.fill_between(\n    forecast_index,\n    low,\n    high,\n    color=\"tomato\",\n    alpha=0.3,\n    label=\"80% prediction interval\",\n)\nplt.legend(loc='upper left')\nplt.grid()\nplt.show()</code></pre> \n</div> \n<p>The following figure shows the output.</p> \n<p><img alt=\"Plot of the predictions\" class=\"alignnone size-full wp-image-105325\" height=\"400\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/ml-18537-results.png\" width=\"800\" /></p> \n<p>As we can see on the right-hand side of the preceding graph in red, the model is able to pick up the pattern that we can visually recognize on the left part of the plot (in blue). The Chronos model predicts a steep decline followed by two smaller spikes. It is worth highlighting that the model successfully predicted this pattern using zero-shot inference, that is, without being trained on the data. Going back to the original prediction task, we can interpret that this particular train station is underutilized on weekends.</p> \n<h2>Clean up</h2> \n<p>To avoid incurring unnecessary costs, use the following code to delete the model endpoint:</p> \n<div class=\"hide-language\"> \n <pre><code class=\"lang-python\">bedrock_client.delete_marketplace_model_endpoint(endpointArn=endpoint_arn)\n\n# Confirm that endpoint is deleted\ntime.sleep(5)\ntry:\n    endpoint = describe_endpoint(bedrock_client, endpoint_arn=endpoint_arn)\n    print(endpoint[\"endpointStatus\"])\nexcept ClientError as err:\n    assert err.response['Error']['Code'] =='ResourceNotFoundException'\n    print(f\"Confirmed that endpoint {endpoint_arn} was deleted\")</code></pre> \n</div> \n<h2>Conclusion</h2> \n<p>The Chronos family of models, particularly the new Chronos-Bolt model, represents a significant advancement in making accurate time series forecasting accessible. Through the simple deployment options with Amazon Bedrock Marketplace and SageMaker JumpStart, organizations can now implement sophisticated forecasting solutions in hours rather than weeks, while achieving state-of-the-art accuracy.</p> \n<p>Whether you’re forecasting retail demand, optimizing operations, or planning resource allocation, Chronos models provide a powerful and efficient solution that can scale with your needs.</p> \n<hr /> \n<h3>About the authors</h3> \n<p style=\"clear: both;\"><img alt=\"\" class=\"size-full wp-image-105352 alignleft\" height=\"100\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/kilian100.jpeg\" width=\"100\" /><strong>Kilian Zimmerer</strong> is an AI and DevOps Engineer at DB Systel GmbH in Berlin. With his expertise in state-of-the-art machine learning and deep learning, alongside DevOps infrastructure management, he drives projects, defines their technical vision, and supports their successful implementation within Deutsche Bahn.</p> \n<p style=\"clear: both;\"><img alt=\"\" class=\"size-full wp-image-105353 alignleft\" height=\"132\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/daniel100.jpeg\" width=\"100\" /><strong>Daniel Ringler</strong> is a software engineer specializing in machine learning at DB Systel GmbH in Berlin. In addition to his professional work, he is a volunteer organizer for PyData Berlin, contributing to the local data science and Python programming community.</p> \n<p style=\"clear: both;\"><img alt=\"\" class=\"size-full wp-image-105356 alignleft\" height=\"136\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/pedro100.jpeg\" width=\"100\" /><strong>Pedro Eduardo Mercado Lopez</strong> is an Applied Scientist at Amazon Web Services, where he works on time series forecasting for labor planning and capacity planning with a focus on hierarchical time series and foundation models. He received a PhD from Saarland University, Germany, doing research in spectral clustering for signed and multilayer graphs.</p> \n<p style=\"clear: both;\"><img alt=\"\" class=\"size-full wp-image-105354 alignleft\" height=\"133\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/simeon.jpeg\" width=\"100\" /><a href=\"https://www.linkedin.com/in/simeon-br/\" rel=\"noopener\" target=\"_blank\"><strong>Simeon Brüggenjürgen</strong></a> is a Solutions Architect at Amazon Web Services based in Munich, Germany. With a background in Machine Learning research, Simeon supported Deutsche Bahn on this project.</p> \n<p style=\"clear: both;\"><img alt=\"\" class=\"size-full wp-image-105349 alignleft\" height=\"111\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/john100.jpeg\" width=\"100\" /><strong>John Liu</strong> has 15 years of experience as a product executive and 9 years of experience as a portfolio manager. At AWS, John is a Principal Product Manager for Amazon Bedrock. Previously, he was the Head of Product for AWS Web3 / Blockchain. Prior to AWS, John held various product leadership roles at public blockchain protocols, fintech companies and also spent 9 years as a portfolio manager at various hedge funds.</p> \n<p style=\"clear: both;\"><img alt=\"\" class=\"size-full wp-image-105350 alignleft\" height=\"130\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/michael100.jpg\" width=\"100\" /><strong>Michael Bohlke-Schneider</strong> is an Applied Science Manager at Amazon Web Services. At AWS, Michael works on machine learning and forecasting, with a focus on foundation models for structured data and AutoML. He received his PhD from the Technical University Berlin, where he worked on protein structure prediction.</p> \n<p style=\"clear: both;\"><img alt=\"\" class=\"size-full wp-image-105351 alignleft\" height=\"133\" src=\"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/florian100.jpg\" width=\"100\" /><strong>Florian Saupe</strong> is a Principal Technical Product Manager at AWS AI/ML research supporting science teams like the graph machine learning group, and ML Systems teams working on large scale distributed training, inference, and fault resilience. Before joining AWS, Florian lead technical product management for automated driving at Bosch, was a strategy consultant at McKinsey & Company, and worked as a control systems and robotics scientist—a field in which he holds a PhD.</p>",
    "source_feed": "https://aws.amazon.com/blogs/machine-learning/feed/",
    "scraped_at_iso": "2025-05-07T15:43:39Z",
    "selected_image_url": "https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/ml-18537-architecture-1260x353.png",
    "filter_verdict": {
        "importance_level": "Interesting",
        "topic": "AI Models",
        "reasoning_summary": "The article discusses the use of the Chronos-Bolt time series foundation model by Deutsche Bahn, highlighting its impact on forecasting efficiency. While not involving key individuals or companies directly, the application of AI in a significant industry context justifies the 'Interesting' classification.",
        "primary_topic_keyword": "time series forecasting AI"
    },
    "filter_error": null,
    "filtered_at_iso": "2025-05-07T15:43:49Z",
    "topic": "AI Models",
    "is_breaking": false,
    "primary_keyword": "time series forecasting AI",
    "seo_agent_results": {
        "generated_title_tag": "Deutsche Bahn Uses Time Series Forecasting AI for Rail Efficiency",
        "generated_meta_description": "Discover how Deutsche Bahn leverages time series forecasting AI with Chronos models on Amazon Bedrock for faster, more accurate predictions.",
        "generated_seo_h1": "How Deutsche Bahn Revolutionizes Rail Operations with Time Series Forecasting AI",
        "generated_json_ld": "<script type=\"application/ld+json\">  \n{  \n  \"@context\": \"https://schema.org\",  \n  \"@type\": \"NewsArticle\",  \n  \"headline\": \"How Deutsche Bahn Revolutionizes Rail Operations with Time Series Forecasting AI\",  \n  \"description\": \"Discover how Deutsche Bahn leverages time series forecasting AI with Chronos models on Amazon Bedrock for faster, more accurate predictions.\",  \n  \"keywords\": [\"time series forecasting AI\"],  \n  \"mainEntityOfPage\": { \"@type\": \"WebPage\", \"@id\": \"https://aws.amazon.com/blogs/machine-learning/how-deutsche-bahn-redefines-forecasting-using-chronos-models-now-available-on-amazon-bedrock-marketplace/\" },  \n  \"image\": { \"@type\": \"ImageObject\", \"url\": \"https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2025/04/28/ml-18537-architecture-1260x353.png\" },  \n  \"datePublished\": \"2025-05-07T15:22:11Z\",  \n  \"author\": { \"@type\": \"Person\", \"name\": \"AI News Team\" },  \n  \"publisher\": {  \n    \"@type\": \"Organization\",  \n    \"name\": \"Dacoola\",  \n    \"logo\": { \"@type\": \"ImageObject\", \"url\": \"https://dacoolaa.netlify.app\" }  \n  }  \n}  \n</script>",
        "generated_article_body_md": "## How Deutsche Bahn Revolutionizes Rail Operations with Time Series Forecasting AI  \n\nDeutsche Bahn (DB), Germany’s national railway operator, is transforming its forecasting capabilities using **time series forecasting AI** through Chronos models, now available on Amazon Bedrock Marketplace. Traditionally, forecasting required weeks of manual effort, but Chronos-Bolt—a cutting-edge foundation model—enables zero-shot predictions with superior accuracy, reducing development time significantly. By treating time series data like language, Chronos delivers faster, more scalable forecasts, helping DB optimize passenger capacity, construction costs, and retail revenue.  \n\n### Unpacking the Impact of Chronos-Bolt  \n\nChronos-Bolt represents a breakthrough in **time series forecasting AI**, offering:  \n- **250x faster inference** compared to traditional methods  \n- **20x better memory efficiency**  \n- **CPU deployment**, reducing hosting costs by up to 10x  \n\nDeutsche Bahn tested Chronos-Bolt in scenarios like predicting construction costs and retail revenue, where it outperformed statistical models like AutoARIMA—even in zero-shot mode. Fine-tuning further enhanced accuracy, proving its adaptability across diverse datasets.  \n\n#### The Technology Behind Chronos  \n\nUnlike conventional forecasting, Chronos applies transformer-based architectures—similar to LLMs—to time series data. This allows it to:  \n- Generate forecasts without prior training on specific datasets.  \n- Scale across heterogeneous data sources (e.g., weather, maintenance logs).  \n- Democratize forecasting for smaller teams via an internal API.  \n\n#### Pros & Cons  \n<div class=\"pros-cons-container\">  \n  <div class=\"pros-section\">  \n    <h5 class=\"section-title\">Pros</h5>  \n    <div class=\"item-list\">  \n      - **Speed**: 100x faster inference than traditional models.  \n      - **Accuracy**: Outperforms AutoARIMA in zero-shot and fine-tuned modes.  \n      - **Scalability**: Works across diverse DB use cases without custom training.  \n    </div>  \n  </div>  \n  <div class=\"cons-section\">  \n    <h5 class=\"section-title\">Cons</h5>  \n    <div class=\"item-list\">  \n      - **Fine-tuning complexity**: Requires computational resources for optimization.  \n      - **Data dependency**: Performance hinges on clean, structured time series data.  \n    </div>  \n  </div>  \n</div>  \n\n#### Future Trajectory  \nDB plans to expand Chronos company-wide, enabling teams to generate forecasts in hours instead of weeks. Future applications could include dynamic pricing and predictive maintenance, further solidifying AI’s role in rail logistics.  \n\n#### Frequently Asked Questions  \n<div class=\"faq-section\">  \n  <details class=\"faq-item\">  \n    <summary class=\"faq-question\">How does Chronos-Bolt differ from traditional forecasting?</summary>  \n    <div class=\"faq-answer-content\">  \n      <p>Chronos-Bolt uses transformer architectures to treat time series data as a \"language,\" enabling zero-shot predictions without dataset-specific training.</p>  \n    </div>  \n  </details>  \n  <details class=\"faq-item\">  \n    <summary class=\"faq-question\">What industries could benefit from Chronos?</summary>  \n    <div class=\"faq-answer-content\">  \n      <p>Retail (demand forecasting), energy (load prediction), and logistics (capacity planning) are prime candidates.</p>  \n    </div>  \n  </details>  \n</div>"
    },
    "seo_agent_error": null,
    "generated_tags": [
        "Time Series Forecasting AI",
        "Deutsche Bahn AI Transformation",
        "Chronos-Bolt Model",
        "AI in Rail Logistics",
        "Transformer-Based Forecasting",
        "Zero-Shot Time Series Prediction",
        "Amazon Bedrock Marketplace",
        "AI for Predictive Maintenance",
        "AutoARIMA vs AI",
        "Future of AI in Transportation"
    ],
    "tags_agent_error": null,
    "trend_score": 15.0,
    "slug": "how-deutsche-bahn-revolutionizes-rail-operations-with-time-series-forecasting-ai",
    "audio_url": null
}